# Xcode
#
# gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore & Swift.gitignore

## User settings
xcuserdata/

## Xcode 8 and later
*.xcscmblueprint
*.xccheckout

## Xcode 4
*.moved-aside
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3

## Obj-C/Swift specific
*.hmap

## App packaging
*.ipa
*.dSYM.zip
*.dSYM

## Playgrounds
timeline.xctimeline
playground.xcworkspace

# Swift Package Manager
#
# Add this line if you want to avoid checking in source code from Swift Package Manager dependencies.
# Packages/
# Package.pins
# Package.resolved
# *.xcodeproj
#
# Xcode automatically generates this directory with a .xcworkspacedata file and xcuserdata
# hence it is not needed unless you have added a package configuration file to your project
# .swiftpm

.build/

# CocoaPods
#
# We recommend against adding the Pods directory to your .gitignore. However
# you should judge for yourself, the pros and cons are mentioned at:
# https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control
#
# Pods/
#
# Add this line if you want to avoid checking in source code from the Xcode workspace
# *.xcworkspace

# Carthage
#
# Add this line if you want to avoid checking in source code from Carthage dependencies.
# Carthage/Checkouts

Carthage/Build/

# Accio dependency management
Dependencies/
.accio/

# fastlane
#
# It is recommended to not store the screenshots in the git repo.
# Instead, use fastlane to re-generate the screenshots whenever they are needed.
# For more information about the screenshots/fastlane folder, visit
# https://docs.fastlane.tools

fastlane/report.xml
fastlane/Preview.html
fastlane/screenshots/**/*.png
fastlane/test_output

# Code Injection
#
# After new code Injection tools there's a generated folder /iOSInjectionProject
# https://github.com/johnno1962/injectionforxcode

iOSInjectionProject/

# macOS
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Project-specific implementation plans
Shared-Module-Implementation-Plan.md

# Xcode Project-specific
*.xcuserstate
*.xcworkspace/xcuserdata/
*.xcodeproj/xcuserdata/
*.xcodeproj/project.xcworkspace/xcuserdata/
DerivedData/
.swiftpm/

# Allow essential project files
!*.xcodeproj/project.pbxproj
!*.xcodeproj/project.xcworkspace/contents.xcworkspacedata
!*.xcodeproj/xcshareddata/

# Build outputs
build/
Build/
**/build/
**/Build/

# Archives
*.xcarchive

# Provisioning profiles
*.mobileprovision
*.provisionprofile

# Code signing
*.p12
*.cer
*.certSigningRequest

# Secrets and keys (DNS privacy app specific)
*.pem
*.key
*.crt
keys/
secrets/
.env
.env.local
.env.production

# Logs
*.log
logs/
crash_reports/

# IDE specific
.vscode/
.idea/
*.swp
*.swo
*~

# Temporary files
*.tmp
*.temp
tmp/
temp/

# Frontend specific (if using web technologies)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Go backend specific
# Binaries for programs and plugins
*.exe
*.exe~
*.dll
*.so
*.dylib

# Test binary, built with `go test -c`
*.test

# Output of the go coverage tool
*.out
coverage.txt

# Go workspace file
go.work

# Go module cache
go.sum

# DNS blocklist cache (if implemented)
blocklists/
*.blocklist
dns_cache/

# Performance profiling
*.prof
*.trace